git status -> status of the project
git init -> on any project i need to run this command one time
ls -> list all files
ls -a -> deep list all files
cd .git -> go inside .git folder (one level down)
cd .. -> go to one level up
ls -la -> deep deep list
rm -rf .git -> delete .git folder
git add file1.txt -> untracked to staged state
git status
git rm --cached file1.txt -> staged to untracked
git add . -> shortcut to stage every file available
states: untracked <-> staged -> commited
git default brach name is main/master
git commit -m "This is my first commit" -> this will only commit the staged files. untracked files wont be commited
git log -> to know the version of commit
modified files wont be commited. you need to run git add filename and then commit to commit the modified files
git show commitID -> to know details about a particular commit
git log -n 1 -> will show only the top 1 log
git log --committer="araf-git" -> will show all commits commited by araf-git



// branching
x applicaton deployed on production. if i want to change anything, then i have to 
stop applicaton -> make changes -> test -> deploy again
but stopping it will cause errors and the applicaton wont work until deployed again
its not a good idea
make a copy of production applicaton and make changes on that copy independently. after changing, deploy the copy. this strategy is called branching
after branching, merge it on the main/master branch
git branch -> find the current branch
git branch b1 -> create new b1 branch
* master -> means i am using this branch
git branch -d b1 -> delete b1 branch
git checkout b1 -> from main, swith to b1

vi file1.txt -> creates a file named file1.txt on first run
press i -> to edit
press esc -> to stop editing
type :wq! and hit enter -> to force exit the file